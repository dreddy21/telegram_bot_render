import asyncio
import logging
from datetime import datetime, timedelta
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8471259728:AAENcc8jzuCepgfOWuFZd3FjAo0tRsjiWhE"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ß–µ–ª—è–±–∏–Ω—Å–∫–∞
tz = pytz.timezone("Asia/Yekaterinburg")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –¥–µ–±–∞–≥–∞)
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = [
    "–ò–ª—è, –ø–æ—Ä–∞ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ üíä",
    "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏, –ò–ª—è üå∏",
    "–¢–∞–±–ª–µ—Ç–∫–∏ –∂–¥—É—Ç —Ç–µ–±—è, –ò–ª—è ‚ù§Ô∏è",
    "–ò–ª—é—à–∞, –≤—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–æ—á–∫–∏ üôè",
    "–ò–ª—è, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤ ‚öïÔ∏è",
]

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–Ø –≤—ã–ø–∏–ª–∞"), KeyboardButton(text="–ù–µ –≤—ã–ø–∏–ª–∞ –µ—â—ë")]],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_daily_reminder(user_id: int):
    message = reminders[datetime.now(tz).day % len(reminders)]
    await bot.send_message(user_id, message, reply_markup=keyboard)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)
    scheduler = AsyncIOScheduler(timezone=tz)
    end_time = datetime.now(tz) + timedelta(hours=1)

    def condition():
        return datetime.now(tz) < end_time

    async def repeat():
        if condition():
            await bot.send_message(user_id, "–ü–µ–π –¥–∞–≤–∞–π üíä", reply_markup=keyboard)

    scheduler.add_job(repeat, "interval", minutes=10)
    scheduler.start()

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –ò–ª—è üå∑ –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00!")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = AsyncIOScheduler(timezone=tz)
    scheduler.add_job(send_daily_reminder, "cron", hour=18, minute=0, args=[message.from_user.id])
    scheduler.start()

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.message()
async def reply_handler(message: types.Message):
    if message.text == "–Ø –≤—ã–ø–∏–ª–∞":
        await message.answer("–£–º–Ω–∏—á–∫–∞ –º–æ—è ‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–æ –∑–∞–≤—Ç—Ä–∞!")
    elif message.text == "–ù–µ –≤—ã–ø–∏–ª–∞ –µ—â—ë":
        await message.answer("–ù—É –ø–µ–π –¥–∞–≤–∞–π üíä")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
