import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

TOKEN = "8471259728:AAENcc8jzuCepgfOWuFZd3FjAo0tRsjiWhE"
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Asia/Yekaterinburg"))

# –§—Ä–∞–∑—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = [
    "–ò–ª—è, –ø–æ—Ä–∞ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ üíä",
    "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏, –ò–ª—è ‚ú®",
    "–¢–∞–±–ª–µ—Ç–æ—á–∫–∏ –∂–¥—É—Ç —Ç–µ–±—è, –ò–ª—è ‚ù§Ô∏è",
    "–ü–µ–π –¥–∞–≤–∞–π, –ò–ª—è üòò"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="–Ø –≤—ã–ø–∏–ª–∞"),
        KeyboardButton(text="–ù–µ –≤—ã–ø–∏–ª–∞ –µ—â—ë")
    ]],
    resize_keyboard=True
)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
active_jobs = {}

async def send_reminders(chat_id):
    active_jobs[chat_id] = True
    for i in range(6):  # 6 —Ä–∞–∑ –ø–æ 10 –º–∏–Ω—É—Ç = —á–∞—Å
        if chat_id not in active_jobs:
            break
        await bot.send_message(chat_id, reminders[i % len(reminders)], reply_markup=keyboard)
        await asyncio.sleep(600)
    active_jobs.pop(chat_id, None)

@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –ò–ª—è! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏ ‚ù§Ô∏è", reply_markup=keyboard)
    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00 –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
    scheduler.add_job(send_reminders, "cron", hour=18, minute=0, args=[message.chat.id])

@dp.message()
async def reply_handler(message: types.Message):
    chat_id = message.chat.id
    if message.text == "–Ø –≤—ã–ø–∏–ª–∞":
        active_jobs.pop(chat_id, None)
        await message.answer("–£–º–Ω–∏—á–∫–∞ –º–æ—è ‚ù§Ô∏è")
    elif message.text == "–ù–µ –≤—ã–ø–∏–ª–∞ –µ—â—ë":
        await message.answer("–ü–µ–π –¥–∞–≤–∞–π üò†")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
